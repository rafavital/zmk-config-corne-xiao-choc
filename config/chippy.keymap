/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <19 16>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <25 26>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <26 27>;
        };

        copy {
            bindings = <&kp C>;
            key-positions = <27 28>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <29 28>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB     &kp Q                &kp W            &kp F                &kp P              &kp B      &kp J        &kp L              &kp U                &kp Y             &mt COLON SEMICOLON  &kp BSPC
&kp ESCAPE  &hml LEFT_CONTROL A  &hml LEFT_ALT R  &hml LEFT_COMMAND S  &hml LEFT_SHIFT T  &kp G      &kp M        &hmr LEFT_SHIFT N  &hmr LEFT_COMMAND E  &hmr LEFT_ALT I   &hmr LEFT_CONTROL O  &kp SQT
&mo 3       &kp Z                &kp X            &kp C                &kp D              &kp V      &kp K        &kp H              &kp COMMA            &mt QUESTION DOT  &mt PIPE SLASH       &mo 3
                                                  &lt 1 SPACE          &kp SPACE          &lt 2 TAB  &lt 2 ENTER  &kp BACKSPACE      &mo 1
            >;
        };

        nav {
            bindings = <
&trans  &trans     &trans        &trans        &trans          &trans     &kp H     &kp J          &kp K      &kp L      &trans  &trans
&trans  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_SHIFT  &trans     &kp LEFT  &kp DOWN       &kp UP     &kp RIGHT  &trans  &trans
&trans  &trans     &trans        &trans        &trans          &trans     &kp HOME  &kp PAGE_DOWN  &kp PG_UP  &kp END    &trans  &trans
                                 &bt BT_CLR    &trans          &kp SPACE  &kp RET   &trans         &kp RGUI
            >;
        };

        num_symbol {
            bindings = <
&kp TAB                      &kp EXCLAMATION             &kp AT_SIGN                      &kp HASH                           &kp DOLLAR                      &kp PERCENT    &kp PLUS   &kp N7               &kp N8        &kp N9              &kp ASTERISK        &kp BSPC
&mt LS(LA(LC(LGUI))) ESCAPE  &hml LCTRL CARET            &hml LEFT_ALT GRAVE              &mt LGUI TILDE                     &mt LEFT_SHIFT SQT              &kp AMPERSAND  &kp EQUAL  &hmr LSHFT NUMBER_4  &hmr LGUI N5  &hmr LALT NUMBER_6  &hmr LCTRL PERCENT  &kp GRAVE
&kp LS(LA(LEFT_CONTROL))     &mt LESS_THAN LEFT_BRACKET  &mt LEFT_BRACE LEFT_PARENTHESIS  &mt RIGHT_BRACE RIGHT_PARENTHESIS  &mt GREATER_THAN RIGHT_BRACKET  &kp CARET      &kp MINUS  &kp NUMBER_1         &kp NUMBER_2  &kp NUMBER_3        &mt PIPE BACKSLASH  &kp TILDE
                                                                                          &none                              &kp UNDER                       &kp SPACE      &kp RET    &trans               &kp N0
            >;
        };

        media {
            bindings = <
&bootloader  &trans        &trans        &trans        &trans        &trans        &trans            &trans        &trans        &trans      &trans  &trans
&trans       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &kp C_PREV        &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT  &trans  &trans
&trans       &trans        &trans        &trans        &trans        &trans        &trans            &trans        &trans        &trans      &trans  &trans
                                         &bt BT_CLR    &to 0         &trans        &kp C_PLAY_PAUSE  &trans        &trans
            >;
        };

        gamefps_layer {
            bindings = <
&kp TAB    &kp N1  &kp N2  &kp N3  &kp N4  &kp N5     &kp T    &trans  &trans    &trans  &trans  &kp ESC
&kp LSHFT  &kp Q   &kp W   &kp E   &kp R   &kp T      &kp G    &trans  &trans    &trans  &kp F5  &kp F6
&kp LCTRL  &kp A   &kp S   &kp D   &kp F   &kp G      &kp B    &trans  &trans    &trans  &trans  &tog 4
                           &kp X   &kp C   &kp SPACE  &kp RET  &trans  &kp RGUI
            >;
        };
    };
};
